generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  clerkId          String            @unique @map("clerk_id")
  name             String
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  clients          Client[]
  invoices         Invoice[]
  items            Item[]
  invoiceTemplates InvoiceTemplate[]

  @@map("users")
}

model Client {
  id          String       @id @default(cuid())
  userId      String       @map("user_id")
  name        String
  email       String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  userClerkId String?      @map("user_clerk_id")
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices    Invoice[]
  itemClients ItemClient[]

  @@unique([userId, email])
  @@index([userId])
  @@map("clients")
}

model Invoice {
  id         String           @id @default(cuid())
  userId     String           @map("user_id")
  clientId   String           @map("client_id")
  data       Json
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")
  templateId String?          @map("template_id")
  client     Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  template   InvoiceTemplate? @relation(fields: [templateId], references: [id])
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([clientId])
  @@map("invoices")
}

model InvoiceTemplate {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  name      String
  category  String
  isActive  Boolean   @default(true)
  isDefault Boolean   @default(false)
  preview   String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices  Invoice[]

  @@index([userId])
  @@map("invoice_templates")
}

model Item {
  id              String       @id @default(cuid())
  userId          String       @map("user_id")
  name            String
  price           Decimal      @db.Decimal(10, 2)
  description     String?
  isForAllClients Boolean      @default(false) @map("is_for_all_clients")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemClients     ItemClient[]

  @@index([userId])
  @@map("items")
}

model ItemClient {
  id       String @id @default(cuid())
  itemId   String @map("item_id")
  clientId String @map("client_id")
  item     Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([itemId, clientId])
  @@index([itemId])
  @@index([clientId])
  @@map("item_clients")
}
